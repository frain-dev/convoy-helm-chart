global:
  convoy:
    # -- Docker image tags for all convoy services
    image: &image "docker.cloudsmith.io/convoy/convoy/frain-dev/convoy"
    # -- Docker image tags for all convoy services
    tag: &tag "v24.1.2"
    # -- Logger Level for all convoy services
    log_level: &logLevel "error"
    # -- Convoy Environment
    environment: &environment "oss"
    # -- Tracing config for all convoy services
    tracer_enabled: &tracerEnabled false
    # -- Tracing provider type
    tracer_type: &tracerType ""
    # -- NewRelic application name
    tracer_app_name: &tracerAppName ""
    # -- NewRelic tracing config enabled
    tracer_config_enabled: &tracerConfigEnabled true
    # -- NewRelic distributed tracing config enabled
    tracer_distributed_tracer_enabled: &tracerDistributedTracingEnabled true
    # -- NewRelic license key
    tracer_license_key: &tracerLicenseKey ""

  externalDatabase:
    # -- Enable an external database, This will use postgresql chart, Change values if you use an external database
    enabled: true
    # -- Host for the external database
    host: "postgresql"
    # -- Password for the external database
    postgresPassword: &postgresPassword "postgres"
    # -- Database name for the external database
    database: &postgresDatabase "convoy"
    # -- Password for the external database, ignored in case of secret parameter with non-empty value
    password: &userPassword "postgres"
    # -- If this secret parameter is not empty, password value will be ignored. The password in the secret should be in the 'password' key
    secret: ""
    # -- Username for the external database
    username: &username "postgres"
    # -- Scheme for the external database. This is postgres by default
    scheme: "postgres"
    # -- Query params for the external database
    options: "sslmode=disable&connect_timeout=30"
    # -- Port for the external database
    port: 5432

  nativeRedis:
    # -- Enable redis, This will use redis chart, Disable if you use an external redis
    enabled: &redisEnabled true
    # -- Host for the redis
    host: "redis-master"
    # -- password for the redis, ignored in case of secret parameter with non-empty value
    password: &redisPassword "convoy"
    # -- If this secret parameter is not empty, password value will be ignored. The password in the secret should be in the 'password' key
    secret: ""
    # -- Port for the redis
    port: 6379

  externalRedis:
    # -- Enable external redis, Enable this if you use an external redis and disable Native redis
    enabled: false
    # -- redis cluster addresses, if set the other values won't be used
    addresses: ""
    # -- Host for the external redis
    host: ""
    # -- Scheme for the external redis. This can be redis, rediss, redis-socket or redis-sentinel
    scheme: ""
    # -- username for the external redis.
    username: ""
    # -- password for the external redis, ignored in case of secret parameter with non-empty value
    password: ""
    # -- If this secret parameter is not empty, password value will be ignored. The password in the secret should be in the 'password' key
    secret: ""
    # -- Database name for the external redis.
    database: ""
    # -- Port for the external redis
    port: ""


# @ignored, used in case of external chart
postgresql:
  # -- Set to false if you don't want to create a postgres instance
  enabled: true
  fullnameOverride: "postgresql"
  global:
    postgresql:
      auth:
        postgresPassword: *postgresPassword
        username: *username
        password: *userPassword
        database: *postgresDatabase


# @ignored, used in case of external chart
redis:
  # -- Set to false if you don't want to create a redis instance
  enabled: true
  architecture: standalone
  fullnameOverride: "redis"
  auth:
    enabled: *redisEnabled
    password: *redisPassword

worker:
  image:
    # -- Repository to be used by the worker. The latest tag is used by default
    repository: *image
    # -- Pull policy for the worker image
    pullPolicy: IfNotPresent
    # @ignored
    tag: *tag

  env:
    environment: *environment
    proxy: ""
    log_level: *logLevel
    smtp:
      enabled: false
      from: ""
      # -- Ignored in case of secret parameter with non-empty value
      password: ""
      # -- If this secret parameter is not empty, password value will be ignored. The password in the secret should be in the 'password' key
      secret: ""
      port: 0
      provider: ""
      url: ""
      username: ""
    tracer:
      type: *tracerType
      enabled: *tracerEnabled
      app_name: *tracerAppName
      license_key: *tracerLicenseKey
      config_enabled: *tracerConfigEnabled
      distributed_tracer_enabled: *tracerDistributedTracingEnabled
    storage:
      enabled: false
      type: ""
      on_prem:
        path: ""
      s3:
        bucket: ""
        accessKey: ""
        # -- Ignored in case of secret parameter with non-empty value
        secretKey: ""
        # -- If this secret parameter is not empty, secretKey value will be ignored. The password in the secret should be in the 'secretKey' key
        secret: ""
        region: ""
        session_token: ""
        endpoint: ""

  service:
    # -- Type of service for the worker
    type: ClusterIP
    # -- Port for the worker service
    port: 80

  autoscaling:
    # -- Enable autoscaling for the worker
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  podDisruptionBudget: { }
    # -- Pod disruption budget
#    maxUnavailable: 1
#    minAvailable: 1

ingest:
  enabled: false
  image:
    # -- Repository to be used by the worker. The latest tag is used by default
    repository: *image
    # -- Pull policy for the worker image
    pullPolicy: IfNotPresent
    # @ignored
    tag: *tag

  env:
    environment: *environment
    interval: 60
    log_level: *logLevel
    # @ignored
    tracer:
      type: *tracerType
      enabled: *tracerEnabled
      app_name: *tracerAppName
      license_key: *tracerLicenseKey
      config_enabled: *tracerConfigEnabled
      distributed_tracer_enabled: *tracerDistributedTracingEnabled

  service:
    # -- Type of service for the worker
    type: ClusterIP
    # -- Port for the worker service
    port: 80

  autoscaling:
    # -- Enable autoscaling for the worker
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  podDisruptionBudget: { }
  # -- Pod disruption budget
    #  maxUnavailable: 1
    #  minAvailable: 1



stream:
  enabled: false
  image:
    # -- Repository to be used by the stream. The latest tag is used by default
    repository: *image
    # -- Pull policy for the stream image
    pullPolicy: IfNotPresent
    # @ignored
    tag: *tag

  app:
    port: 5008
    resources:
      limits:
        cpu: 50m
        memory: 60Mi
      requests:
        cpu: 40m
        memory: 50Mi

  env:
    environment: *environment
    # @ignored
    tracer:
      type: *tracerType
      enabled: *tracerEnabled
      app_name: *tracerAppName
      license_key: *tracerLicenseKey
      config_enabled: *tracerConfigEnabled
      distributed_tracer_enabled: *tracerDistributedTracingEnabled

  ingress:
    # -- Enable ingress for the stream server
    enabled: false
    annotations: {}
    ingressClassName: ""
    tls:
      - hosts:
          - stream.test.com
        secretName: test-tls-secret
    hosts:
      - host: stream.test.com
        http:
          paths:
            - path: /
              pathType: Prefix

  service:
    # -- Type of service for the stream
    type: ClusterIP
    # -- Port for the stream service
    port: 80

  autoscaling:
    # -- Enable autoscaling for the stream
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80


server:
  image:
    # -- Repository to be used by the server. The latest tag is used by default
    repository: *image
    # -- Pull policy for the server image
    pullPolicy: IfNotPresent
    # @ignored
    tag: *tag

  env:
    environment: *environment
    log_level: *logLevel
    host: ""
    sign_up_enabled: false
    auth:
      jwt:
        enabled: true
      native:
        enabled: true
    # @ignored
    tracer:
      type: *tracerType
      enabled: *tracerEnabled
      app_name: *tracerAppName
      license_key: *tracerLicenseKey
      config_enabled: *tracerConfigEnabled
      distributed_tracer_enabled: *tracerDistributedTracingEnabled
    storage:
      enabled: false
      type: ""
      on_prem:
        path: ""
      s3:
        bucket: ""
        accessKey: ""
        # -- Ignored in case of secret parameter with non-empty value
        secretKey: ""
        # -- If this secret parameter is not empty, secretKey value will be ignored. The password in the secret should be in the 'secretKey' key
        secret: ""
        region: ""
        session_token: ""
        endpoint: ""

  ingress:
    # -- Enable ingress for the server
    enabled: false
    annotations: {}
    ingressClassName: ""
    tls:
      - hosts:
          - test.com
        secretName: test-tls-secret
    hosts:
      - host: test.com
        http:
          paths:
            - path: /
              pathType: Prefix

  service:
    # -- Type of service for the server
    type: ClusterIP
    # -- Port for the server service
    port: 80

  autoscaling:
    # -- Enable autoscaling for the server
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  podDisruptionBudget: { }
    # -- Pod disruption budget
#    maxUnavailable: 1
#    minAvailable: 1


migrate:
  image:
    # -- Repository to be used by to migrate. The latest tag is used by default. It will install before any other services.
    repository: *image
    # -- Pull policy for the migrate image
    pullPolicy: IfNotPresent
    # @ignored
    tag: *tag
